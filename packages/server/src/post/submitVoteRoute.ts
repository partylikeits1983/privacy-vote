import { Router } from "express";
import { ethers } from "ethers";
import dotenv from "dotenv";

// Load environment variables from .env file
dotenv.config();

import ZK_KYCABI from "../abi/ZK_KYC.json";
const WebAuthnAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
const RPC_URL = process.env.RPC_URL || "http://127.0.0.1:8545"; // Use RPC_URL from .env if available

const PRIVATE_KEY = process.env.PRIVATE_KEY; // Load the private key from .env

if (!PRIVATE_KEY) {
  console.error("Private key not found in .env file.");
  process.exit(1); // Exit if no private key found
}

const submitVoteRoute = Router();

// Route to accept a string
submitVoteRoute.post("/vote", async (req, res) => {
  console.log("Voting");

  const { proofBytes } = req.body;
  const { publicInputs } = req.body;

  // console.log(req.body);
  console.log(proofBytes);
  console.log(publicInputs);

  /*     const proofBytes = "0x14861b37acad3d2ca575e3c02e95054a0d581db00fa46050e86a6fe0541d41a40bd2f3f0f96cd19b4a66e9de8ed2d2e449fb564f6df584d1d03915a07050a20718a98f084bbeb6e905e8042713158e60173aaef3f29602b496d5ee2d3847b24f047c2e371d0c703e538524ff8dbebbb3630ff8df4c11b264f022d5bd7ce324512127fb89476a558af0dc05fe8c4f75185058e69ae0c8b35fd7c7532afff8918616b785dfa4ebf55a06aad399a5ef47273d2024695bd4b2b138255e48360d85bd15ffd76adbfceca9e897369dbbf875ec38bb9eabee1c54d30ec4eb14999d08d22f612427477871624ac315a70f7d3061b9e6ae08def39eb1e911b7411662455728b0c487a7a03e7708555b629ce2550beb1ca7d7f080392f34a22ad3354adf152cd85ba9d1f5a3f82c2e756953af25a3f817ee9a16e93bb108e87c6d8cc2b13d2fcae979e40b4d7068801314742c281f88536dab7abdde4123d71f5f3c57018c1846a73b85772b37db2eb40531f74e6608116210488a52aed42bb0b073e520c9048a151d4dfaa1040013357dfd1936b06fb85ae26e13904b047ae269aab943400af78c2b76ce733bfe3f3a652f20437b57979fdd0549e00df14185476c905ddf11b64c2a6217856994feb4442eb5c3a131194ebcca08c2b783faccce3d3abeba14ea71f6e06c200ea648efba39d5a7095fcc1849cf9d9751190e3ef8d28dcda81dedb0f46ed81297283f62b09c17832f76ee2847d9e0d8b94484884cf9f1a6c324580e0d598ca14be66d009fed42b7801609f9a5a97153ebdb3a21764534e22620f05c286494488179a1d8ba69a7ff250ec8f95b966c771d99196e0ae28f7b210793cfba7e8047af04ac3c7a52fa0de1e166a931de682dc273282a9f9deb1aa9158e93d772f38a9d8ac5da3817735c27500f5b05ba01d22de6469f77a5f8d69e16ccd13049e32668d6216939f998eb0bbcc5eed0fd4439aba544565e23a386ed170822c7850af1fdcf56ae7680ddcb9c34d04cff8eaa7ea26f1f28c80d1728732cbc77df5b98ae3ae940be48a8189774978ec5d54b6ceed3d9aa28540e20669b142b3941e7e1a8bd32541de3fa2ea334ce9f146857aa9288e9cf12870f3e304f01052adc05f6e858bc52c043b979d7a83bad5a547e0a7d84fff1ea3ee0c3becd10f2fa652623d1c7489dc650aa09129654cc37d01b52bcb485f17eaf98bce00f251dc3ad52be2c1ef52d6e6437b65d913d7b0b4c443d5b0c6e6af71cf4fa9be303aaadba52a80d2ec57a74299d59be45e37b80386758f0439a011f4e100843332cb2342f5161a3a6ee34bab0c657e4f07e416ce1bf9c7d6bb8f95059fa7ec69710babb1f0a95a9aacf00479ba8666e968e6729311af97f22ee14009dc15847c0272974fc2e859a4145cab60fb89c5084ae14564c11004c9f62fea3782322fa88159213e76edea572c41f17fb8c4bbff040aaca8aa2cc40fce3afa7f4593e67a41d267b3867c8c2924b7d574367c31b5cd1ac75e8bbdb7f4d5161b7f7de3f04c11c2672358bc23c14b47c913a758d202be695bc32d01b3899e04b309741acc4f42ebb90563212416b39b1cba8bb69a8641d4e0a7681651ba4d62226a6541f472f2effb7ca637b9130e434c13cd53b762737ceb7e73f987702a075b13f9076ac3f272c166445816c93de8cea89446a1b954e58df461a929ea1ed820e8ef7b7ab5c160467ca93cf150388eaacb92ee713d1d3681f113cc24556e9ba4db26fafa1f40ef80dff8e07f226e649b85ff77a782234ec9e133d31d97e4b9df916a2d7483820bf75b6bd51461539b8b975518baed565510e34f49fbda88f12eba98ad35eac0cbd16e5b35d4b43725c7a04717f87a5db1e14b4136115d8f9b9521510a3478c003da0b98441a27b77088fe5b44fc0e330e84e8b11ceb693fff20f1c18e0e8cc2419590a119c060c95f676cf85625ca805ba86effadb0352260cc18d4f9f8f2512f1aa705fe9ae7c405438ff6fdf54e48ac9c6bb1d0aaa07224500b0c79785bd01c9fbd6ae3756ebeab1fb2f5a5c4d210fd906863f3a50bc1e7d3fd43f8f7c5521069bafddb69f854d600315c65a9dbabd1c2e99db2368025e97748ba78772ee04dcb930e21cbd7333486ee919640c0e58775edc5ef1ec0be5f28cd5e7a7988c08e68a0e3a3a05283a6d9b03ccf9b395e6d8f4f207dff7d6880759b1394d49640d3b01896e49e31bd472d94893a30b43dc4373e2e19d8ed5725526ba767227cb1e7d0564d498c27f01c5a266261cde3cc03fe9d5290393a8925c47f7a829131117917f6d8b739eb14e7a785b3366c80245ff4bf98d1deb6860ead32dee6af9a40c158ecdac19a279a0d1830b7f1b432faa3fff8774701f2ffedb29ad70865c800c07f2450a2c73a3dda742d32c0a9d6802db79e8e0ab54ad2bc69cf91e8682a913563258dd96ef3b271793f10e35b1820cac0d8bfc38dbe9e95a061c031bd21e06315ecb24b89e2934fd196c8589ca0d8fe1fd3b0bc641c093c22c31a514a39a1f3023658303f7613fe8cbb06d0966e3cbee5edc1c4a6b53bd969adb59051199157fa123eadbaa84f1d4162f0387a7b79b1d618fce92c5d2705d74be5abdcbad2ee989e95c8d4957ce81734e95f88713902859536f27c3a4f08bd830ee1d34cb253a2715c8ac5e86942aad0a6d00043b5e56e91c0ca24c3f7f31a1f940058a7e10222dc8d37740fcef06189ab554adbc676eddba26286fa6d284ca040d5b56082b6e82eebf73c39d0231c9e17f2aaf9a98babaa0b968039f69b9e7a2cab12193165689a1ca3ea6135d0d3571c77f591ba1d2af3ed2ee2706bd0d0fad9806ed1d13401dfe200b64c38da29bf36271850681206ff04bcf1c493beea6773320fb8d2a63b68ce7a05a120992f845d098cd532b5f1067c2e1f79e3ba9bc118c059619107b7ef41c01e8182b11bb7f69314e2776f7c5802af1d2d279329a9db15d3acc04fab7025666aff28856910daf14d38d11a882136eac4cda8fc51c7782f7c4a0"

    const publicInputs = {
        root: '0x2e3764cc712bf528977821358801d9ccc5bdd126eff91bcfad0f9bff8aee02e6',
        nulifierHash: '0x2098f5fb9e239eab3ceac3f27b81e481dc3124d55ffed523a839ee8446b64864',
        proposalId: '0x0000000000000000000000000000000000000000000000000000000000000000',
        voteType: '0x0000000000000000000000000000000000000000000000000000000000000001'
      }
 */
  if (proofBytes) {
    // Instead of just a provider, now we use a signer
    const provider = new ethers.JsonRpcProvider(RPC_URL);
    const wallet = new ethers.Wallet(PRIVATE_KEY, provider);

    const zkKYC = new ethers.Contract(WebAuthnAddress, ZK_KYCABI.abi, wallet);

    // we can check the validity of the proof here, but for this demo I am skipping it
    const publicInputsArray = [
      publicInputs.root,
      publicInputs.nulifierHash,
      publicInputs.proposalId,
      publicInputs.voteType,
    ];

    console.log("PUBLIC INPUTS", publicInputsArray)

    try {
      await zkKYC.vote(proofBytes, publicInputsArray);
      res.json({ success: true });
    } catch (error) {
      console.error("Error fetching proposal data:", error);
      res.json({ success: false });
    }
  }
});

export default submitVoteRoute;
